name: PR Main

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true  

env:
  REGISTRY: "registry.digitalocean.com/digitalmischief"
  IMAGE_NAME: "comminity"
  NODE_VERSION: 16

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Lint workspace
  lint_workspace:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v3
        name: 'Setup Node'
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
          
      - run: npm install
        name: 'Install dependencies'
      
      - uses: mansagroup/nrwl-nx-action@v2.1.0
        name: Lint workspace
        with:
          targets: lint
          all: 'true'
          affected: 'false'

  # Lint affected
  lint:
    runs-on: ubuntu-latest
    needs: [lint_workspace]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v3
        name: 'Setup Node'
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
          
      - run: npm install
        name: 'Install dependencies'
      
      - uses: mansagroup/nrwl-nx-action@v2.1.0
        name: Lint affected
        with:
          targets: lint
          parallel: 'true'
          nxCloud: 'false'
          
  # Build affected
  build:
    runs-on: ubuntu-latest
    needs: [lint_workspace]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v3
        name: 'Setup Node'
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
          
      - run: npm install
        name: 'Install dependencies'
      
      - uses: mansagroup/nrwl-nx-action@v2.1.0
        name: Build affected
        with:
          targets: build
          args: --configuration=production
          parallel: 'true'
          nxCloud: 'false'
          
      - name: Save build output
        uses: actions/upload-artifact@v3
        with:
          name: build_output
          path: dist

  # Test affected
  # test:
  #   runs-on: ubuntu-latest
  #   needs: [lint_workspace]

  #   # Service containers
  #   services:
  #     # Testing DB
  #     postgres:
  #       image: postgres:14-alpine
  #       # Provide the password for postgres
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: postgres
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         # Maps tcp port 5432 on service container to the host
  #         - 5432:5432

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
          
  #     - uses: actions/setup-node@v3
  #       name: 'Setup Node'
  #       with:
  #         node-version: ${{env.NODE_VERSION}}
  #         cache: 'yarn'
          
  #     - run: yarn install
  #       name: 'Install dependencies'
      
  #     - uses: mansagroup/nrwl-nx-action@v2.1.0
  #       name: Test affected
  #       with:
  #         targets: test
  #         parallel: 'true'
  #         nxCloud: 'true'
  #       env:
  #         NX_CLOUD_ACCESS_TOKEN: ${{secrets.NX_CLOUD_ACCESS_TOKEN}}
          
  # Deploy affected
  deploy:
    runs-on: ubuntu-latest
    # needs: [lint, build]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - uses: actions/setup-node@v3
        name: 'Setup Node'
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'
          
      - run: npm install
        name: 'Install dependencies'
      
      - uses: mansagroup/nrwl-nx-action@v2.1.0
        name: Deploy API and Comminity
        with:
          targets: deploy
          projects: comminity,api
          affected: false
          parallel: 'true'
          nxCloud: 'false'

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      
      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Tag comminity docker image
        run:  docker tag comminity registry.digitalocean.com/digitalmischief/comminity

      - name: Tag api docker image
        run:  docker tag comminity registry.digitalocean.com/digitalmischief/api

      - name: Push comminity image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/digitalmischief/comminity 

      - name: Push api image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/digitalmischief/api 
        # run: docker push $(echo $IMAGE_NAME)